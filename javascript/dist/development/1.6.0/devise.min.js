(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("web3"), require("xmlhttprequest"));
	else if(typeof define === 'function' && define.amd)
		define(["web3", "xmlhttprequest"], factory);
	else if(typeof exports === 'object')
		exports["devise"] = factory(require("web3"), require("xmlhttprequest"));
	else
		root["devise"] = factory(root["Web3"], root["xmlhttprequest"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_web3__, __WEBPACK_EXTERNAL_MODULE_xmlhttprequest__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./devise/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./devise/base.js":
/*!************************!*\
  !*** ./devise/base.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Base classes BaseEthereumClient, BaseDeviseClient and related functions\n * Copyright(c) 2018 Pit.AI Technologies\n * LICENSE: GPLv3\n */\n\n// Node.js doesn't have XHR, shim it\nif (typeof XMLHttpRequest === 'undefined') {\n    global.XMLHttpRequest = __webpack_require__(/*! xmlhttprequest */ \"xmlhttprequest\").XMLHttpRequest;\n}\n\nlet Web3 = __webpack_require__(/*! web3 */ \"web3\");\nconst ETHER_PRECISION = 10 ** 18;\n\n// The following code is to accommodate using jQuery in Node.js\nconst GITHUB_USERNAME = 'devisechain';\nconst REPO_VERSION = '6c5e4852045522a416bea23cc7a816b1ae79b668';\nconst CDN_ROOT = 'https://cdn.jsdelivr.net/gh/' + GITHUB_USERNAME + '/Devise@' + REPO_VERSION + '/config/';\nconst CONFIG_URL = 'https://config.devisefoundation.org/config.json';\n\nconst get_json_sync = function (url) {\n    let res;\n    const request = new XMLHttpRequest();\n    request.open('GET', url, false); // `false` makes the request synchronous\n    request.send(null);\n\n    if (request.status === 200) {\n        return JSON.parse(request.responseText);\n    }\n};\n\nconst get_contract_abi = function (contractName) {\n    const url = CDN_ROOT + 'abi/' + contractName + '.json';\n    const data = get_json_sync(url);\n    return data;\n};\n\nconst get_contract_address = function () {\n    const config = get_json_sync(CONFIG_URL);\n    return config[\"CONTRACT_ADDRESSES\"];\n};\n\nconst get_default_node_url = function (network = 'MAINNET') {\n    const config = get_json_sync(CONFIG_URL);\n    return config[\"NETWORK_TO_NODE\"][network.toUpperCase()];\n};\n\nclass BaseEthereumClient {\n    /**\n     * Constructor\n     * @param account default: none, optional address to query the smart contract as\n     * @param node_url default: auto, optional ethereum node from which to query smart contract information\n     * @param network default: MainNet, optional network to connect to\n     */\n    constructor(account, node_url, network) {\n        if (!network) {\n            network = 'MAINNET';\n        }\n        node_url = node_url || get_default_node_url(network);\n        account = account || '0x0000000000000000000000000000000000000000';\n        const provider = new Web3.providers.HttpProvider(node_url);\n        this.web3 = new Web3(provider);\n        if (this.web3.eth.net === undefined) throw \"Please use a version of web3.js >= 1.0.0.\";\n\n        this.account = account;\n        this.address = this.account;\n    }\n\n    async _get_network_id() {\n        const id = await this.web3.eth.net.getId();\n        return id;\n    }\n\n    async get_eth_balance(address) {\n        if (address === undefined) return 0;\n        const bal = (await this.web3.eth.getBalance(address)) / ETHER_PRECISION;\n        return bal;\n    }\n\n}\n\nclass BaseDeviseClient extends BaseEthereumClient {\n    constructor(account, node_url, network) {\n        super(account, node_url, network);\n    }\n\n    async init_contracts() {\n        const token_abi = get_contract_abi('devise_token');\n        let rental_abi = get_contract_abi('devise_rental_proxy');\n        const contract_address = get_contract_address();\n        const network_id = await this._get_network_id();\n        this._token_contract = new this.web3.eth.Contract(token_abi, contract_address[network_id].DEVISE_TOKEN);\n        this._rental_contract = new this.web3.eth.Contract(rental_abi, contract_address[network_id].DEVISE_RENTAL);\n    }\n}\n\nmodule.exports = { BaseEthereumClient, BaseDeviseClient, get_json_sync };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://devise/./devise/base.js?");

/***/ }),

/***/ "./devise/clients/client.js":
/*!**********************************!*\
  !*** ./devise/clients/client.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * DeviseClient class\n * Copyright(c) 2018 Pit.AI Technologies\n * LICENSE: GPLv3\n */\nconst aggregation = __webpack_require__(/*! aggregation/es6 */ \"./node_modules/aggregation/es6.js\");\nconst DeviseToken = __webpack_require__(/*! ./token */ \"./devise/clients/token.js\");\nconst RentalContract = __webpack_require__(/*! ./contract */ \"./devise/clients/contract.js\");\n\n/*\n * DeviseClient\n * This is the basic wrapper class around all Devise client facing operations. This wrapper connects to an Ethereum\n * node and facilitates smart contract operations such as provision, leaseAll, getBalance, etc.\n */\nclass DeviseClient extends aggregation(DeviseToken, RentalContract) {\n  /**\n   * Constructor\n   * @param account default: none, optional address to query the smart contract as\n   * @param nodel_url default: auto, optional ethereum node from which to query smart contract information\n   * @param network default: MainNet, optional network to connect to\n   */\n  constructor(account, node_url, network) {\n    super(account, node_url, network);\n  }\n}\n\nmodule.exports = DeviseClient;\n\n//# sourceURL=webpack://devise/./devise/clients/client.js?");

/***/ }),

/***/ "./devise/clients/contract.js":
/*!************************************!*\
  !*** ./devise/clients/contract.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * RentalContract class\n * Copyright(c) 2018 Pit.AI Technologies\n * LICENSE: GPLv3\n */\nconst BaseClient = __webpack_require__(/*! ../base */ \"./devise/base.js\");\nconst BaseDeviseClient = BaseClient.BaseDeviseClient;\nconst IU_PRECISION = 10 ** 6;\nconst TOKEN_PRECISION = 10 ** 6;\nconst ETHER_PRECISION = 10 ** 18;\n\n/*\n * RentalContract\n * This is the basic wrapper class around the Devise rental smart contract client facing operations.\n * This wrapper connects to an Ethereum node and facilitates rental smart contract operations such as provision,\n * leaseAll, getClientSummary, etc.\n */\nclass RentalContract extends BaseDeviseClient {\n    /**\n     * Constructor\n     * @param account default: none, optional address to query the smart contract as\n     * @param node_url default: auto, optional Ethereum node from which to query smart contract information\n     * @param network default: MainNet, optional network to connect to\n     */\n    constructor(account, node_url, network) {\n        super(account, node_url, network);\n    }\n\n    /**\n     * Verifies that the client's escrow balance on the rental smart contract is sufficient to cover the number of seats\n     * and limit price specified at the current total incremental usefulness\n     * @param client_address The address for which to get the current escrow balance\n     * @param num_seats The number of seats to use for the comparison\n     * @param limit_price The limit price to use for the comparison\n     * @returns {Promise<boolean>}\n     * @private\n     */\n    async _has_sufficient_funds(client_address, num_seats, limit_price) {\n        const current_balance = (await this._rental_contract.methods.getAllowance().call({ from: client_address })) / TOKEN_PRECISION;\n        return limit_price * this.total_incremental_usefulness() * num_seats <= current_balance;\n    }\n\n    /**\n     * Finds the client address for a beneficiary if the address provided is a beneficiary\n     * @param address a beneficiary address\n     * @returns {Promise<string>} The client address if any\n     */\n    async get_client_address(address) {\n        const client_address = await this._rental_contract.methods.getClientForBeneficiary().call({ from: address });\n        if (client_address !== '0x0000000000000000000000000000000000000000') return client_address;\n    }\n\n    /**\n     * Queries the DeviseToken contract for the token balance of the current account\n     * @returns {Promise<number>}\n     */\n    async dvz_balance() {\n        return (await this._token_contract.methods.balanceOf(this.address).call({ from: this.address })) / TOKEN_PRECISION;\n    }\n\n    /**\n     * Queries and returns the Ether balance of the given address\n     * @returns {Promise<number>}\n     */\n    async eth_balance() {\n        if (this.address === undefined) return 0;\n        return (await this.web3.eth.getBalance(this.address)) / ETHER_PRECISION;\n    }\n\n    /**\n     * Queries the Devise rental contract for the number of tokens provisioned into the rental contract for this account\n     * @returns {Promise<number>}\n     */\n    async dvz_balance_escrow() {\n        return (await this._rental_contract.methods.getAllowance().call({ from: this.address })) / TOKEN_PRECISION;\n    }\n\n    /**\n     * Query the current ETH/USD rate\n     * @returns {Promise<number>}\n     */\n    async get_eth_usd_rate() {\n        let rate = await this._rental_contract.methods.rateETHUSD().call();\n        rate = parseInt(rate);\n        return rate / 10 ** 8;\n    }\n\n    /**\n     * Query the constant USD/DVZ rate\n     * @returns {Promise<number>}\n     */\n    async get_usd_dvz_rate() {\n        let rate = await this._rental_contract.methods.RATE_USD_DVZ().call();\n        return parseInt(rate);\n    }\n\n    /**\n     * Query the current ETH/DVZ rate\n     * @returns {Promise<number>}\n     */\n    async get_eth_dvz_rate() {\n        const rate = await this.get_eth_usd_rate();\n        return rate * (await this.get_usd_dvz_rate());\n    }\n\n    /**\n     * Queries the Devise rental contract for the rent per seat for the current lease term\n     * @returns {Promise<number>}\n     */\n    async rent_per_seat_current_term() {\n        return (await this._rental_contract.methods.getRentPerSeatCurrentTerm().call()) / TOKEN_PRECISION;\n    }\n\n    /**\n     * Queries the Devise rental contract for the indicative rent per seat for the next lease term\n     * @returns {Promise<number>}\n     */\n    async indicative_rent_per_seat_next_term() {\n        return (await this._rental_contract.methods.getIndicativeRentPerSeatNextTerm().call()) / TOKEN_PRECISION;\n    }\n\n    /**\n     * Returns the current lease term per the smart contract as a string (for example 8/2018)\n     * @returns {Promise<string>}\n     */\n    async current_lease_term() {\n        const idx = await this._rental_contract.methods.getCurrentLeaseTerm().call();\n        return this._lease_term_to_date_str(idx);\n    }\n\n    /**\n     * Converts numerical index based lease term to corresponding month/year string\n     * @param lease_term_idx\n     * @returns {*}\n     * @private\n     */\n    _lease_term_to_date_str(lease_term_idx) {\n        if (lease_term_idx === 0) return undefined;\n\n        let term_year = 2018;\n        while (lease_term_idx > 12) {\n            term_year++;\n            lease_term_idx -= 12;\n        }\n        lease_term_idx++;\n        return lease_term_idx.toString() + '/' + term_year.toString();\n    }\n\n    /**\n     * Gets the current price per bit from the smart contract for the current lease term\n     * @returns {Promise<number>}\n     */\n    async price_per_bit_current_term() {\n        return (await this._rental_contract.methods.getPricePerBitCurrentTerm().call()) / TOKEN_PRECISION;\n    }\n\n    /**\n     * Gets the indicative price per bit from the smart contract for the next lease term\n     * @returns {Promise<number>}\n     */\n    async indicative_price_per_bit_next_term() {\n        return (await this._rental_contract.methods.getIndicativePricePerBitNextTerm().call()) / TOKEN_PRECISION;\n    }\n\n    /**\n     * Checks if the current client specified in the constructor is a power user\n     * @returns {Promise<bool>}\n     */\n    is_power_user() {\n        return this._rental_contract.methods.isPowerUser().call({ from: this.address });\n    }\n\n    /**\n     * Returns the beneficiary address for the client specified in the constructor if any\n     * @returns {Promise<string>}\n     */\n    beneficiary() {\n        if (this.address === undefined) return Promise().resolve('0x0000000000000000000000000000000000000000');\n        return this._rental_contract.methods.getBeneficiary().call({ from: this.address });\n    }\n\n    /**\n     * Returns the Total Incremental Usefulness of all the leptons added to the chain\n     * @returns {Promise<number>}\n     */\n    async total_incremental_usefulness() {\n        return (await this._rental_contract.methods.getTotalIncrementalUsefulness().call()) / IU_PRECISION;\n    }\n\n    /**\n     * Returns the current number of seats available for lease\n     * @returns {Promise<number>}\n     */\n    async seats_available() {\n        const seats = await this._rental_contract.methods.getSeatsAvailable().call();\n        return parseInt(seats);\n    }\n\n    /**\n     * Returns the total number of seats leased in the current lease term\n     * @returns {Promise<number>}\n     */\n    async current_term_seats() {\n        const client = await this.get_client_address(this.address);\n        if (typeof client === 'undefined') return 0;\n        return this._rental_contract.methods.getCurrentTermSeats().call({ from: client });\n    }\n\n    /**\n     * Returns the indicative total number of seats leased in the next lease term\n     * @returns {Promise<number>}\n     */\n    async next_term_seats() {\n        const client = await this.get_client_address(this.address);\n        if (typeof client === 'undefined') return 0;\n        return this._rental_contract.methods.getNextTermSeats().call({ from: client });\n    }\n\n    /**\n     * Returns an object containing a complete summary of the current client, including: escrow balance, DVZ balance,\n     * beneficiary address, current term seats, indicative next term seats, power user status, and historical data\n     * access status\n     * @returns {Promise<object>}\n     */\n    async client_summary() {\n        let summary;\n        try {\n            summary = await this.get_client_summary(this.address);\n        } catch (err) {\n            console.log(\"No client found for address %s\", this.address);\n            return;\n        }\n        return summary;\n    }\n\n    /**\n     * Returns and hashes and incremental usefulness of all the leptons added to the chain\n     * @returns {Promise<Array>}\n     */\n    async get_all_leptons() {\n        const all_leptons = await this._rental_contract.methods.getAllLeptons().call();\n        const count = await this._rental_contract.methods.getNumberOfLeptons().call();\n        let leptons = [];\n        let prev_hash;\n        for (let i = 0; i < all_leptons[0].length; i++) {\n            const lepton_hash = all_leptons[0][i];\n            const contract_iu = all_leptons[1][i];\n            leptons.push({\n                hash: lepton_hash,\n                previous_hash: prev_hash,\n                incremental_usefulness: contract_iu / IU_PRECISION\n            });\n            prev_hash = lepton_hash;\n        }\n        return leptons;\n    }\n\n    /**\n     * Get account summaries of all the addresses that have ever provisioned tokens.\n     * @returns {Promise<Array>}\n     */\n    async get_all_clients() {\n        const clientAddresses = await this._rental_contract.methods.getAllClients().call();\n        let clients = [];\n        for (let i = 0; i < clientAddresses.length; i++) {\n            const summary = await this.get_client_summary(clientAddresses[i]);\n            clients.push(summary);\n        }\n        return clients;\n    }\n\n    /**\n     * Get renter account summaries of all current lease term renters from the smart contract\n     * @returns {Promise<Array>}\n     */\n    async get_all_renters() {\n        const renterAddresses = await this._rental_contract.methods.getAllRenters().call();\n        let renters = [];\n        for (let i = 0; i < renterAddresses.length; i++) {\n            const summary = await this.get_client_summary(renterAddresses[i]);\n            renters.push(summary);\n        }\n        return renters;\n    }\n\n    /**\n     * Returns an object containing a complete summary of the client specified, including: escrow balance, DVZ balance,\n     * beneficiary address, current term seats, indicative next term seats, power user status, and historical data\n     * access status\n     */\n    async get_client_summary(clientAddress) {\n        const summary = await this._rental_contract.methods.getClientSummary(clientAddress).call();\n        let res = {};\n        res['client'] = clientAddress;\n        res['beneficiary'] = summary['0'];\n        res['dvz_balance_escrow'] = summary['1'] / TOKEN_PRECISION;\n        res['dvz_balance'] = summary['2'] / TOKEN_PRECISION;\n        res['last_term_paid'] = this._lease_term_to_date_str(summary['3']);\n        res['power_user'] = summary['4'];\n        res['historical_data_access'] = summary['5'];\n        res['current_term_seats'] = summary['6'];\n        res['indicative_next_term_seats'] = summary['7'];\n        return res;\n    }\n\n    /**\n     * Gets a list of all the bids including address, number of seats requested, and limit price\n     * @param active Only return bidders with sufficient token balances to participate in auction\n     * @returns {Promise<Array>}\n     */\n    async get_all_bidders(active = false) {\n        let bids = [];\n        const all_bidders = await this._rental_contract.methods.getAllBidders().call();\n\n        for (let i = 0; i < all_bidders[0].length; i++) {\n            if (all_bidders[0][i] === \"0x0000000000000000000000000000000000000000\") {\n                continue;\n            }\n            if (!active || this._has_sufficient_funds(all_bidders[0][i], all_bidders[1][i], all_bidders[2][i] / TOKEN_PRECISION)) bids.push({\n                address: all_bidders[0][i],\n                requested_seats: all_bidders[1][i],\n                limit_price: all_bidders[2][i] / TOKEN_PRECISION\n            });\n        }\n        return bids;\n    }\n\n    async get_owner_eth_balance() {\n        const owner = await this._rental_contract.methods.owner().call();\n        return await this.get_eth_balance(owner);\n    }\n\n    async get_escrow_wallet_address() {\n        return await this._rental_contract.methods.escrowWallet().call();\n    }\n\n    async get_revenue_wallet_address() {\n        return await this._rental_contract.methods.revenueWallet().call();\n    }\n\n    async balance_of_escrow_wallet() {\n        const escrow = await this.get_escrow_wallet_address();\n        return (await this._token_contract.methods.balanceOf(escrow).call()) / TOKEN_PRECISION;\n    }\n\n    async balance_of_revenue_wallet() {\n        const revenue = await this.get_revenue_wallet_address();\n        return (await this._token_contract.methods.balanceOf(revenue).call()) / TOKEN_PRECISION;\n    }\n\n    async get_all_implementations() {\n        const res = await this._rental_contract.methods.getAllImplementations().call();\n        return res[1].map((ver, idx) => {\n            let obj = {};\n            obj[\"ver\"] = parseInt(ver);\n            obj[\"impl\"] = res[0][idx];\n            return obj;\n        });\n    }\n}\n\nmodule.exports = RentalContract;\n\n//# sourceURL=webpack://devise/./devise/clients/contract.js?");

/***/ }),

/***/ "./devise/clients/token.js":
/*!*********************************!*\
  !*** ./devise/clients/token.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * DeviseToken class\n * Copyright(c) 2018 Pit.AI Technologies\n * LICENSE: GPLv3\n */\nconst BaseClient = __webpack_require__(/*! ../base */ \"./devise/base.js\");\nconst BaseDeviseClient = BaseClient.BaseDeviseClient;\nconst TOKEN_PRECISION = 10 ** 6;\n\n/**\n * DeviseToken\n * This is the base class for all token contract operations\n */\nclass DeviseToken extends BaseDeviseClient {\n  constructor(account, node_url, network) {\n    super(account, node_url, network);\n  }\n\n  /**\n   * The global cap on how many DVZ tokens can be minted\n   * @returns {Promise<number>}\n   */\n  async cap() {\n    return (await this._token_contract.methods.cap().call()) / TOKEN_PRECISION;\n  }\n\n  /**\n   * The current number of DVZ Tokens in circulation\n   * @returns {Promise<number>}\n   */\n  async total_supply() {\n    return (await this._token_contract.methods.totalSupply().call()) / TOKEN_PRECISION;\n  }\n\n  /**\n   *\n   * @param owner\n   * @param spender\n   * @returns {Promise<number>}\n   */\n  async allowance(owner, spender) {\n    return (await this._token_contract.methods.allowance(owner, spender).call()) / TOKEN_PRECISION;\n  }\n\n  /**\n   * Query the DVZ token balance the specified address\n   * @param address\n   * @returns {Promise<number>}\n   */\n  async balance_of(address) {\n    return (await this._token_contract.methods.balanceOf(address).call()) / TOKEN_PRECISION;\n  }\n\n  /**\n   * Utility function to query the DVZ token balance of the token sale wallet\n   * @returns {Promise<number>}\n   */\n  async balance_of_token_wallet() {\n    const owner = await this._rental_contract.methods.tokenWallet().call();\n    return await this.balance_of(owner);\n  }\n\n  // TODO replace with allowance of rental contract from tokenSaleWallet\n  // /**\n  //  * Utility function to query the allowance of the token sale contract\n  //  * @returns {Promise<number>}\n  //  */\n  // async allowance_of_token_sale_contract() {\n  //     const owner = await this._rental_contract.methods.tokenWallet().call();\n  //     const spender = await this._token_sale_contract._address;\n  //     return await this.allowance(owner, spender);\n  // }\n\n  /**\n   * Utility function to query the Ether balance of the contract owner\n   * @returns {Promise<number|*>}\n   */\n  async get_owner_eth_balance() {\n    const owner = await this._token_contract.methods.owner().call();\n    return await this.get_eth_balance(owner);\n  }\n}\n\nmodule.exports = DeviseToken;\n\n//# sourceURL=webpack://devise/./devise/clients/token.js?");

/***/ }),

/***/ "./devise/index.js":
/*!*************************!*\
  !*** ./devise/index.js ***!
  \*************************/
/*! exports provided: DeviseClient, DeviseTokenOwner, MasterNode, DeviseOwner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var _clients_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clients/client */ \"./devise/clients/client.js\");\n/* harmony import */ var _clients_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_clients_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"DeviseClient\", function() { return _clients_client__WEBPACK_IMPORTED_MODULE_0___default.a; });\n/* harmony import */ var _owner_token_owner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./owner/token_owner */ \"./devise/owner/token_owner.js\");\n/* harmony import */ var _owner_token_owner__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_owner_token_owner__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"DeviseTokenOwner\", function() { return _owner_token_owner__WEBPACK_IMPORTED_MODULE_1___default.a; });\n/* harmony import */ var _miners_master_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./miners/master_node */ \"./devise/miners/master_node.js\");\n/* harmony import */ var _miners_master_node__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_miners_master_node__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"MasterNode\", function() { return _miners_master_node__WEBPACK_IMPORTED_MODULE_2___default.a; });\n/* harmony import */ var _owner_owner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./owner/owner */ \"./devise/owner/owner.js\");\n/* harmony import */ var _owner_owner__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_owner_owner__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"DeviseOwner\", function() { return _owner_owner__WEBPACK_IMPORTED_MODULE_3___default.a; });\n/*!\n * devise\n * Copyright(c) 2018 Pit.AI Technologies\n * LICENSE: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007\n *\n *  ES5 Example Usage:\n *      var client = new devise.DeviseClient(account);\n *      client.init_contracts().then(() => {\n *        client.client_summary().then(summary => console.log(summary));\n *      });\n\n *  Async/Await Example Usage:\n *      const client = new devise.DeviseClient(account);\n *      await client.init_contracts();\n *      const client_summary = await client.client_summary();\n *      console.log(client_summary);\n */\n\n\n\n\n\n\n/**\n * Polyfill for environments without XHR\n */\nif (typeof XMLHttpRequest === 'undefined') {\n  global.XMLHttpRequest = __webpack_require__(/*! xmlhttprequest */ \"xmlhttprequest\").XMLHttpRequest;\n}\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://devise/./devise/index.js?");

/***/ }),

/***/ "./devise/miners/master_node.js":
/*!**************************************!*\
  !*** ./devise/miners/master_node.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * MasterNode class\n * Copyright(c) 2018 Pit.AI Technologies\n * LICENSE: GPLv3\n */\nconst BaseClient = __webpack_require__(/*! ../base */ \"./devise/base.js\");\nconst BaseDeviseClient = BaseClient.BaseDeviseClient;\nconst IU_PRECISION = 10 ** 6;\n\n/**\n * MasterNode\n * Smart Contract wrapper class for Master Node operations\n */\nclass MasterNode extends BaseDeviseClient {\n    constructor(account, node_url, network) {\n        super(account, node_url, network);\n    }\n\n    get_master_nodes() {\n        return this._rental_contract.methods.getMasterNodes().call();\n    }\n}\n\nmodule.exports = MasterNode;\n\n//# sourceURL=webpack://devise/./devise/miners/master_node.js?");

/***/ }),

/***/ "./devise/owner/owner.js":
/*!*******************************!*\
  !*** ./devise/owner/owner.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const BaseClient = __webpack_require__(/*! ../base */ \"./devise/base.js\");\nconst BaseDeviseClient = BaseClient.BaseDeviseClient;\nconst IU_PRECISION = 10 ** 6;\nconst TOKEN_PRECISION = 10 ** 6;\nconst ETHER_PRECISION = 10 ** 18;\n\nclass DeviseOwner extends BaseDeviseClient {\n    constructor(account, node_url, network) {\n        super(account, node_url, network);\n    }\n\n    async get_implementation() {\n        return await this._rental_contract.methods.implementation().call();\n    }\n\n    async get_version() {\n        return await this._rental_contract.methods.version().call();\n    }\n\n    async get_rate_setter() {\n        return await this._rental_contract.methods.rateSetter().call();\n    }\n\n    async get_escrow_history() {\n        const res = await this._rental_contract.methods.getEscrowHistory().call();\n        return res;\n    }\n\n    async get_escrow_version() {\n        const hist = await this.get_escrow_history();\n        return hist.length;\n    }\n\n    async get_revenue_history() {\n        const res = await this._rental_contract.methods.getRevenueHistory().call();\n        return res;\n    }\n\n    async get_revenue_version() {\n        const hist = await this.get_revenue_history();\n        return hist.length;\n    }\n}\n\nmodule.exports = DeviseOwner;\n\n//# sourceURL=webpack://devise/./devise/owner/owner.js?");

/***/ }),

/***/ "./devise/owner/token_owner.js":
/*!*************************************!*\
  !*** ./devise/owner/token_owner.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * DeviseTokenOwner class\n * Copyright(c) 2018 Pit.AI Technologies\n * LICENSE: GPLv3\n */\nconst DeviseToken = __webpack_require__(/*! ../clients/token */ \"./devise/clients/token.js\");\n\n/**\n * DeviseTokenOwner\n * Smart Contract wrapper class for Token Owner operations\n */\nclass DeviseTokenOwner extends DeviseToken {\n    constructor(account, nodel_url, network) {\n        super(account, nodel_url, network);\n    }\n\n    async get_minters() {\n        let minters = [];\n        const owner = await this._token_contract.methods.owner().call();\n        const n = await this._token_contract.methods.getNumberOfMinters().call({ from: owner });\n        for (let i = 0; i < n; i++) {\n            const minter = await this._token_contract.methods.getMinter(i).call({ from: owner });\n            minters.push(minter);\n        }\n        return minters;\n    }\n}\n\nmodule.exports = DeviseTokenOwner;\n\n//# sourceURL=webpack://devise/./devise/owner/token_owner.js?");

/***/ }),

/***/ "./node_modules/aggregation/es6.js":
/*!*****************************************!*\
  !*** ./node_modules/aggregation/es6.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nmodule.exports = __webpack_require__(/*! ./src/aggregation-es6.js */ \"./node_modules/aggregation/src/aggregation-es6.js\")\n\n\n\n//# sourceURL=webpack://devise/./node_modules/aggregation/es6.js?");

/***/ }),

/***/ "./node_modules/aggregation/src/aggregation-es6.js":
/*!*********************************************************!*\
  !*** ./node_modules/aggregation/src/aggregation-es6.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n**  Aggregation -- Aggregation of Base Class and Mixin Classes\n**  Copyright (c) 2015-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/*  ==== ECMAScript 6 variant ====  */\n\nvar aggregation = (base, ...mixins) => {\n\n    /*  create aggregation class  */\n    let aggregate = class __Aggregate extends base {\n        constructor (...args) {\n            /*  call base class constructor  */\n            super(...args)\n\n            /*  call mixin's initializer  */\n            mixins.forEach((mixin) => {\n                if (typeof mixin.prototype.initializer === \"function\")\n                    mixin.prototype.initializer.apply(this, args)\n            })\n        }\n    };\n\n    /*  copy properties  */\n    let copyProps = (target, source) => {\n        Object.getOwnPropertyNames(source)\n            .concat(Object.getOwnPropertySymbols(source))\n            .forEach((prop) => {\n            if (prop.match(/^(?:initializer|constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))\n                return\n            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))\n        })\n    }\n\n    /*  copy all properties of all mixins into aggregation class  */\n    mixins.forEach((mixin) => {\n        copyProps(aggregate.prototype, mixin.prototype)\n        copyProps(aggregate, mixin)\n    })\n\n    return aggregate\n}\n\nmodule.exports = aggregation\n\n\n\n//# sourceURL=webpack://devise/./node_modules/aggregation/src/aggregation-es6.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://devise/(webpack)/buildin/global.js?");

/***/ }),

/***/ "web3":
/*!************************************************************************************!*\
  !*** external {"root":"Web3","commonjs2":"web3","commonjs":["web3"],"amd":"web3"} ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_web3__;\n\n//# sourceURL=webpack://devise/external_%7B%22root%22:%22Web3%22,%22commonjs2%22:%22web3%22,%22commonjs%22:%5B%22web3%22%5D,%22amd%22:%22web3%22%7D?");

/***/ }),

/***/ "xmlhttprequest":
/*!*********************************!*\
  !*** external "xmlhttprequest" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_xmlhttprequest__;\n\n//# sourceURL=webpack://devise/external_%22xmlhttprequest%22?");

/***/ })

/******/ });
});